@page "/formlibros"
@using BookCrudBlazor.Data
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime iJSRuntime;
<h3>Formulario</h3>

<EditForm Model="@libros">
    <form>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label>Titutlo</label>
               <InputText class="form-control" placeholder="Titulo del libro" @bind-Value="@libros.Title"></InputText>
            </div>
            <div class="form-group col-md-6">
                <label>Categoria</label>
                <InputText class="form-control" placeholder="Categoria del libro" @bind-Value="@libros.Category"></InputText>
            </div>
        </div>
        <div class="form-group">
            <label>Sinopsis</label>
            <InputTextArea class="form-control" placeholder="Sinopsis del libro" @bind-Value="@libros.Synopsis" maxlength="40" @onkeypress="Contadoor" id="mensaje">

            </InputTextArea>
            <div id="contador">
                0/40
            </div>
        </div>
        <button class="btn btn-primary" @onclick="Guardar">Agregar</button>
</form>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    Libros libros = new Libros();
    RespuestaFront<object> resp = new RespuestaFront<object>();
    RespuestaFront<Libros> respBook = new RespuestaFront<Libros>();
    public string API = "/api/Books";

    //Funcion asincrona para guardar datos insertados en el formulario
    private async Task Guardar()
    {
        var x = await Http.PostAsJsonAsync<Libros>(API, libros);
        resp = x.Content.ReadFromJsonAsync<RespuestaFront<object>>().Result;
        await iJSRuntime.InvokeVoidAsync("AlertGuardarLibro");
        Nav.NavigateTo("/libros");
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            respBook = await Http.GetFromJsonAsync<RespuestaFront<Libros>>(API +"/"+ Id);
            libros = respBook.CongragulationData;
        }
    }

    private async Task Contadoor()
    {
        await iJSRuntime.InvokeVoidAsync("FullCounter");
    }
}
